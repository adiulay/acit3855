version: "3.3"
services:
    zookeeper:
        image: wurstmeister/zookeeper
        ports:
            - "2181"
        hostname: zookeeper
    kafka:
        image: wurstmeister/kafka
        command: [start-kafka.sh]
        ports:
            - "9092:9092"
        hostname: kafka
        environment:
            KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
            KAFKA_ADVERTISED_HOST_NAME: ec2-52-24-255-57.us-west-2.compute.amazonaws.com # docker-machine ip
            KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
            KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
            KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://ec2-52-24-255-57.us-west-2.compute.amazonaws.com:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            - "zookeeper"
    db:
        image: mysql:5.7
        restart: always
        environment:
            MYSQL_DATABASE: "events"
            # So you don"t have to use root, but you can if you like
            MYSQL_USER: "adiulay"
            # You can use whatever password you like
            MYSQL_PASSWORD: "P@ssw0rd"
            # Password for root access
            MYSQL_ROOT_PASSWORD: "P@ssw0rd"
        ports:
            # <Port exposed> : < MySQL Port running inside container>
            - "3306:3306"
        expose:
            # Opens port 3306 on the container
            - "3306"
        volumes:
            - my-db:/var/lib/mysql
    receiver:
        image: receiver:latest
        ports:
            - "8080"
        networks:
            - "api.network"
        environment: 
            - TARGET_ENV=test
        volumes:
            - /home/ubuntu/config/receiver:/config
            - /home/ubuntu/logs:/logs
        depends_on:
            - "kafka"
    storage:
        image: storage:latest
        ports:
            - "8090"
        networks:
            - "api.network"
        environment: 
            - TARGET_ENV=test
        volumes:
            - /home/ubuntu/config/storage:/config
            - /home/ubuntu/logs:/logs
        depends_on:
            - "kafka"
            - "db"
    processing:
        image: processing:latest
        ports:
            - "8100"
        networks:
            - "api.network"
        # network_mode: "host"
        environment: 
            - TARGET_ENV=test
        volumes:
            - /home/ubuntu/config/processing:/config
            - /home/ubuntu/logs:/logs
            - processing-db:/data
        depends_on:
            - "storage"
    audit_log:
        image: audit_log:latest
        ports:
            - "8110"
        networks:
            - "api.network"
        environment: 
            - TARGET_ENV=test
        volumes:
            - /home/ubuntu/config/audit_log:/config
            - /home/ubuntu/logs:/logs
        depends_on:
            - "kafka"
    nginx:
        image: nginx:latest
        volumes:
            - /home/ubuntu/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on: 
            - "receiver"
            - "storage"
            - "processing"
            - "audit_log"
        ports:
            - "80:80"
        networks:
            - "api.network"
    # Names our volume
volumes:
    my-db:
    processing-db:
networks:
    api.network: